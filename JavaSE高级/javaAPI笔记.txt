字符串
 
* String
 * StringBuilder   线程不安全，效率高
 * StringBuffer    线程安全，    效率低
 * 
 * 上面三个都是字符串，只不过String创建的是不可变字符串，
 * 后面两个创建的是可变字符串。
 * 所以在频繁的修改字符串的场景下，我们会使用StringBuilder或者StringBuffer来创建字符串。
 * 在他们的内部维护着一个长度可变的字符数组，每次的需改都是基于该数组来的
	* StringBuilder或者StringBuffer提供了一下常见api来实现对字符串编辑
	*  增： append()
	*  删： delete()
	*  改： replace()
	*  插： insert()
	StringBuilder  strBuilder=new StringBuilder("abcd");
	System.out.println("strBuilder:"+strBuilder);
包装类

		 * 将包装类转成对应的基本类型
		 * 		通过包装类提供额xxValue()实现
		 */
		int x=in.intValue();
		
		/*
		 * 将基本数据类型转成包装类:
		 * 	每个包装类都提供了对应的valueOf()，
		 * 	可以将基本数据类型转成对应的包装类
		 */
		boolean b=false;
		Boolean bs=Boolean.valueOf(b);
自动拆装箱

		 * 这里编译器在编译时帮我们实现了如下操作：
		 * 		先创建Integer对象
		 * 		然后调用x.valueOf(1)将基本类型转成包装类。
		 */
		Integer x=1;
		
		/*
		 *此处也是编译做了额外的操作：
		 *		调用对应包装类的  xxValue() 
		 *		实现将包装类转成对应的基本数据类型
		 */
		int i=new Integer(20);
		
		/*
		 * 注意：使用自动拆装箱机制，可能会带来空指针异常的风险。
		 * 		 所以一般在将 包装类直接赋值给 
				 基本数据类型的时候要进行非空判断
		 */
		Integer in=null;
		int i1=in;
正则表达式
day02 Demo07