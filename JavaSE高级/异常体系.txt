java异常的层次：
 * 		所有异常的父类： Throwable，其下有两个子类
 * 			1、error（错误）//程序本身不能修复
 * 表示整个程序在运行期间出现了十分严重的错误，
 * 比如 系统崩溃，jvm内存溢出，像这种我们不能通过代码解决的问题
 * 叫做错误，此种情况下只有终止整个程序。
 * 
 * 2、exception（异常）//程序本身可以修复
 * 2.1非检测异常( RuntimeException)
 * 我们书写完代码后，编译器在进行源码编译时，
 * 不会提示和发现这些异常，因此在书写时也不需要我们去做相应的处理，
 *   但是在运行时如果出现问题，整个程序还是会抛出对应的异常，
 *   然后运行整个程序的线程强制结束。
 *   
 *   一般来说发生此种类型的异常，是因为我们代码书写有问题，
 *   对于这种异常我们应该做的是去修正自己的代码，
 *   而不是期望通过异常处理机制来修正此bug，
 *   比如说：空指针，数组越界
 * 
 * 2.2 检查异常（checked-exception）
 * 我们书写代码，编译器在编译源码时，会发现此类异常，并且要求我们
 * 做出相应的处理（1、同throws抛出，2、try{}catch捕获），
 * 编译器也会做出相应的检查，如果没做处理则编译报错。
 * 
 * 一般来说此种类型的异常都是由于程序的运行环境所导致的，
 * 我们的程序会运行在各种未知的环境中，而我们也无法干预使用者如何使用我们的程序，
 * 
 * 比如： 1、该异常发生以后是可以被回复的

 * 如一个internet连接中断以后发生的异常，
 * 我们可以通过异常处理机制尝试再次连接网络
 * 					  
 * 2、程序依赖了不可靠的外部条件，
 * 比如说IO读写文件，但是根据使用书写的路径根本找不到路径，
 * 此时我们应通过异常机制告知使用者路径有问题
 * 				
 * 3、该异常发生以后，不会导致整个程序运行处错，
 * 不会对后续的程序数据造成影响
 * 我们进行一些后续操作还是可以继续执行。	



一个try后面可以接多个catch块，可以针对多种异常，
		 *但是这多个异常只会有一个被执行， 
		 *当try中抛出的异常实和 catch中相对应的最近的异常类型匹配以后，
		 *后续的catch都不会再被执行。

 * finally 块* 	  常跟在异常捕获机制的后面，
	 *   finally中代码一定会被执行（不管try中出不出现异常）,
	 *   一般在finally块中去定义释放资源的操作（关闭流，关闭连接...）


异常处理方式：
throws 将异常向外抛出
 需要注意的是，异常抛出以后，并没有得到解决，
 它只是告诉当前方法的调用者 ，
 调用此方法时需要解决对应类的异常（解决方式可以是try catch，也可以是继续throws向外抛出） 
 