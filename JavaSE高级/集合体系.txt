在传递时是用引用，a的值为A，如x指向a(x=a)时x的值也为A，改变堆中A的值，
a和x一起改变

集合

(1)数组是大小固定的，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）
(2)JAVA集合可以存储和操作数目不固定的一组数据
(3)若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，
则需要使用容器类库，array不适用

List特点：元素有放入顺序，元素可重复 
Map特点：元素按键值对存储，无放入顺序 
Set特点：元素无放入顺序，元素不可重复

集合主要有Collection和Map接口。 

Collection接口和Collections工具类

Collection的子类：
 		 1、List集合   有序可重复集
 		 2、Set集合     无序不可重复集
 
  java.util.List  是 Collection的子类，其常见实现类有：
  			 ArrayList??  底层基于数组实现，对元素遍历获取的效率最高
  			 LinkedList  底层基于双向链表实现，对元素增删效率较高。

Vector : 和ArrayList一样,底层也是基于数组实现，	
 			  只不过该类是线程安全的，
 			 即在单线程操作集合情况下我们是使用ArrayList
 			 在多线程情况下操作集合，我们使用Vector
 	




 set集合
 		常见实现类：
 				HashSet ： 基于hashcode机制存放数据，
 						     当我们想快速访问set集合中的元素时，用HashSet
 				TreeSet ： 对set集合中的元素按照了从小到大的自然排序方式进了排序，
 						     对于这个被排序元素需要实现排序接口，自定义排序规则，否则报错。
 				LinkedHashSet ：按照元素存放顺序来 存储数据
 	                在添加元素时，不允许元素重复，它存放元素时，
 		会通过存入对象的equals方法来检查该元素是否已经存在，
 		不存在，则添加，否则不添加。
  		因此，存入set集合中的元素一般都要求重写equals()

 
 迭代器实现集合元素的遍历
	Iterator  ：迭代器接口，所有的集合类都实现了该接口，
	





队列(管状结构)：
 		Queue: 存储一组元素，元素存取按照 先进先出的原则，
			    元素只能够通过队尾进， 队首出，所以对于队列来说总是首位增删元素。
			队列的常见实现子类是 LinkedList
 		并且带有iterator(), 作用是返回一个对应类型的迭代器。


Map ：以key-value的形式来存放数据，
       并且存储时map要求key不可以重复，
 		   其会自动调用 key的equals方法来进行检测。
 	其有两个常见实现类：
		HashMap   线程不安全的， 适合单线程情况下使用，效率高
 		HashTable 线程安全，适合在多线程情况下使用，效率低

Map的遍历，常用有三种遍历方式：
 		1、遍历所有的key
		2、遍历所有的value
 		3、遍历所有的key-value

  compareTo方法用来我们自定义排序规则，
	 	
	 	 该方法会将调用当方法的对象   和  传入的对象进行比较，
	  	 此方法在执行时会返回一个int值，但是我们不用去关心该的具体数值是多少，
	    只需关心该值的取值范围：
	    （1）当返回值  > 0   说明当前对象 大于  给定参数 ， sort排序时将当前对象向后排
	    （2）当返回值 = 0    说明当前对象 = 给定参数
	    （3） 当返回值 < 0   说明  当前对象 小于  给定参数， sort排序时将当前对象向前排
	 

　      Comparable是排序接口，若一个类实现了Comparable接口，
         就意味着“该类支持排序”。
         而Comparator是比较器，我们若需要控制某个类的次序，
          可以建立一个“该类的比较器”来进行排序。
         Map是由key-value键对组成的。