写的源程序文件名是*.java,编译后为*.class.

debug 快捷键：f6下一行
f5进入具体细节（如循环）

           进入变量界面再进入Breakpoints界面可以多选断点点击双叉删除
开启需求文档快捷键：ALT + SHIFT +J

变量为储存数值的空间 例如 a代替10 b代替20 （int a=10，int b=20）

switch匹配到正确值之后，从正确值由顺序朝下

ascil表大写字母在前面，65为A，97为a。关系为+32

循环结构来求出未知数n（这是递归的思想）
递归对空间利用特别大，容易崩溃

public static void method  void类型表达不用返回数据类型 所以return后不用跟值：return;
public static int method     非void类型表达要返回数据类型 return后要跟值：return x;

静态方法不能调用非静态方法！
静态方法效率上要比实例化高，静态方法的缺点是不自动进行销毁，而实例化的则可以做销毁。

for循环（知道次数） while循环（不知道次数)

当程序出现多个相同数据类型的时候，就可以考虑使用数组来存放

return多个数据用数组返回――――如果数据类型不同则用一个类数据封装（return类）
如：	public static User test() {
	   User user=new User();
	  age=user.age;
	  name=user.name;
	  num = user.num;
	  return user;
	   }

封装：创建一个类用来储存数据,（通过new对象，对象名.数据)调用

栈为引用变量，堆为表面（{1，2，3，4}这类).

复合数据类型比较时，比较的是地址值。

int[] arr3=new int[5];//创建一个长度为5的数组，但未定义

int arr4=new int[]{1,2,3,6,5}//动态初始化，在创建时不规定长度，数组长度为数据个数

通过数组遍历时，下标最大值为数组长度-1

for(int x:arr4)//增强for循环用来实现数组的遍历

int[] arrInt=null;
int length=arrInt.length;//会报空指针错误，因为复合数据类型为null

多个数据采用数组返回        public static int[] method() {
		        int age=19;
		        int classNo=1808;
		        int[] xx={age,classNo};
		        return  xx;
	}
	
	
	public static void main(String[] args) {
		int[] xx=method();
		System.out.println(xx);

do 
whlie（true）循环，条件为false时结束

构造函数的作用：通过创建对象来进行调用，系统自带无参的构造函数
//有参数的构造函数
	public Test(String name) {
		this.name = name;
	}
 构造函数一般用来定义对象里的变量（如name）
构造方法的作用是完成对象的初始化工作，
他能够把定义对象时的参数传递给对象的域。
要先定义变量，再在构造函数里定义具体的值
	private double circle;
	private double height;
	  public Taper(){
     double height=5;//高
     double circle=r*r*3.14;

面向对象：
当主方法要调用实例方法时，必须要new一个对象来分配给实例方法空间，才能使用
操作系统题：
临时变量作用为判断是否登陆，不能用来进行修改如：student.age

变量：
调用studentService()需要一个学生对象，我们就给一个
通过new 关键字来创建学生实体， 然后将该实体对象  赋值给引用变量student
Student student=new Student();

一般通过（类名.属性名）调用静态变量，因为都行的。但不推荐使用对象来调用静态变
量和静态方法。因为这意味着你要实例化类的对象，这增加了开销且增加了出错的可能性。

引用传递：指的时在方法调用时，传递的参数将引用变量的实际地址值传递过去

import关键字用来引入别的包里的类（包名.类名）
无包名的类可以访问有包名的类（因为有包名的类有路径）有包类则不可访问无包名类0。

引用传递例子：

封装对变量的把控力较高，
                private int age;
	public void setAge(int age)throw Exception{
		if(age>10&&age<70)
		{this.age=age}
		else{
		     throw new Exception
		}
javaBean:java程序中一个可重复用的公共组件，一般用来不同类之间的数据传输
1.javaBean必须为公共类，类为public修饰
2.其所有属性为private
3.对于属性的操作，需要通过一组setXXX（Object obj）和getXXX（）来实现
4.javaBean必须有一个无参构造器（保证能执行）
5.建议实现反序列化接口

向上造型和子类变量调用不一样，向上造型的原理是在父类变量可以引用的基础上
再去调用子类的方法和变量，如果子类重写或隐藏，则使用子类的变量和方法。

重载和重写：重载是参数列表不同的同名方法，重写是参数列表相同但是子类覆盖父类
继承和多态：继承是子类继承父类的方法和属性（加载子类对象要先加载父类对象），
多态是1.子类覆盖父类方法2.有向上造型3.具有继承关系

接口和抽象类：接口会降低代码的耦合性，在jdk1.8以后，接口允
许两种特使的方法存在方法体：       
                 1、静态方法
                   使用的规则：因为在java中允许存在多个接口，所以当
两个接口存在同名同参数的静态方法时，通过子类（被接口接的类）去调用该方法，不知道调用哪个方法，
要通过父类（接口）调用。
                 2、默认方法
                    使用规则：子类实现父类接口后，必须重写父类的default方法，


内部类分类
             1.局部内部类（定义在方法中）：要想使用局部内部类要创建对象，且该类只能在内部使用！
             注意：局部内类可以直接访问代码段中的局部变量。在jdk1.8以嵌，局部内部
类访问 外部的局部变量时，该局部变量必须被final修饰（ 在局部内部类中
该变量不能被修改）。
             2.全局内部类（定义在类体中）：1.实例内部类，在全局内部类实现对全局变量的修改。
                                    2.静态内部类，
             3.匿名内部类：没有名字的内部类，因为没有名字，所以它只能被使用一次，
一般我们使用匿名内部类来简化代码的书写。 

方法的执行顺序：
看变量类型决定哪个类是本类,在依照子类，父类，子类中方法参数的父类，
父类中方法参数的父类顺序

但是instanceof在Java的编译状态和运行状态是有区别的：

在编译状态中，instanceof判断class可以是object对象的父类，自身类，子类。在这三种情况下Java编译时不会报错。